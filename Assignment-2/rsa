import time

def generate_key_pairs():
    # Step 1: Select p, q (small primes for simplicity in this example)
    p = 3
    q = 11

    # Step 2: Calculate n
    n = p * q

    # Step 3: Calculate totient function of n
    phi_n = (p - 1) * (q - 1)

    # Step 4: Select e
    e = 7

    # Step 5: Calculate d (modular inverse of e mod phi_n)
    d = pow(e, -1, phi_n)

    return ((e, n), (d, n))

def encrypt(public_key, plaintext):
    e, n = public_key
    message = [ord(char) - ord('a') for char in plaintext]
    ciphertext = [pow(char, e, n) for char in message]
    return ciphertext

def decrypt(private_key, cipher):
    d, n = private_key
    decrypted = [chr(pow(char, d, n) + ord('a')) for char in cipher]
    return ''.join(decrypted)

def main():
    # Key Generation Timing
    start_time = time.perf_counter()
    public_key, private_key = generate_key_pairs()
    key_gen_time = time.perf_counter() - start_time
    print(f"Key Generation Time: {key_gen_time:.6f} seconds")
    print(f"Public Key: {public_key}, Private Key: {private_key}")

    plaintext = "dobby"

    # Encryption Timing
    start_time = time.perf_counter()
    encrypted_text = encrypt(public_key, plaintext)
    encryption_time = time.perf_counter() - start_time
    print(f"Encryption Time: {encryption_time:.6f} seconds")
    print(f"Encrypted Text: {encrypted_text}")

    # Decryption Timing
    start_time = time.perf_counter()
    decrypted_text = decrypt(private_key, encrypted_text)
    decryption_time = time.perf_counter() - start_time
    print(f"Decryption Time: {decryption_time:.6f} seconds")
    print(f"Decrypted Text: {decrypted_text}")

if _name_ == "_main_":
    main()
