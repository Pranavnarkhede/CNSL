#Sender/Receiver
import socket
import time

class Sender:
    def __init__(self, e, n):
        self.e = e
        self.n = n

    def encrypt_string(self, plaintext):
        # Encrypt each character separately and create a list of encrypted values
        start_time = time.perf_counter()
        encrypted_chars = []
        for char in plaintext:
            # Convert each character to its integer representation and encrypt
            char_int = ord(char)
            encrypted_char = pow(char_int, self.e, self.n)
            encrypted_chars.append(encrypted_char)
        
        encryption_time = time.perf_counter() - start_time
        return encrypted_chars, encryption_time

def main():
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(('localhost', 65432))
            print("Sender: Requesting public key from receiver...")
            data = s.recv(1024).decode()
            e, n = map(int, data.split(','))
            print(f"Sender: Received public key (e={e}, n={n}) from receiver")

            # Input plaintext string
            plaintext = input("Sender: Enter a string plaintext to encrypt: ")
                    
            sender = Sender(e, n)
            encrypted_chars, encryption_time = sender.encrypt_string(plaintext)
            
            # Convert encrypted characters to a string for transmission
            encrypted_message = ','.join(map(str, encrypted_chars))
            print(f"Sender: Encrypted characters: {encrypted_message}")
            print(f"Encryption Time is: {encryption_time:.6f} seconds")
            
            # Send the encrypted message
            s.sendall(encrypted_message.encode())
            print("Sender: Encrypted message is sent to receiver")

    except socket.error as e:
        print(f"Socket Error: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()


Receiver
import socket
import random
import time
import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def extended_gcd(a, b):
    if a == 0:
        return b, 0, 1
    gcd, x1, y1 = extended_gcd(b % a, a)
    x = y1 - (b // a) * x1
    y = x1
    return gcd, x, y

def mod_inverse(e, phi):
    gcd, x, _ = extended_gcd(e, phi)
    if gcd != 1:
        raise ValueError("Mod inverse does not exist")
    return x % phi

def find_coprime(phi):
    for e in range(2, phi):
        if gcd(e, phi) == 1:
            return e
    raise ValueError("No coprime found")

def generate_keypair(p, q):
    # Validate input primes
    if not (is_prime(p) and is_prime(q)):
        raise ValueError("Both p and q must be prime")
    
    # Prevent using small or identical primes
    if p == q or p < 11 or q < 11:
        raise ValueError("Use distinct primes larger than 10")
    
    n = p * q
    phi = (p - 1) * (q - 1)
    
    # Find a suitable public exponent
    e = find_coprime(phi)
    
    # Calculate private key
    d = mod_inverse(e, phi)
    
    return (e, n), (d, n)

class Receiver:
    def __init__(self, d, n):
        self.d = d
        self.n = n

    def decrypt_message(self, encrypted_chars):
        start_time = time.perf_counter()
        decrypted_chars = []
        
        # Decrypt each character
        for encrypted_char in encrypted_chars:
            # Decrypt the character
            decrypted_char_int = pow(int(encrypted_char), self.d, self.n)
            decrypted_char = chr(decrypted_char_int)
            decrypted_chars.append(decrypted_char)
        
        # Join decrypted characters into a string
        decrypted_text = ''.join(decrypted_chars)
        decryption_time = time.perf_counter() - start_time
        
        return decrypted_text, decryption_time

def main():
    while True:
        try:
            p = int(input("Enter first Prime Number (must be > 10): "))
            q = int(input("Enter second Prime Number (must be > 10): "))
            
            # Generate keypair with more robust validation
            (e, n), (d, n) = generate_keypair(p, q)

            print(f"Generated Public Key: (e={e}, n={n})")
            print(f"Generated Private Key: (d={d}, n={n})")

            receiver = Receiver(d, n)

            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('localhost', 65432))
                s.listen()
                print("Receiver: Waiting for connection from Sender...")

                conn, addr = s.accept()
                with conn:
                    print(f"Receiver: Connected by {addr}")

                    public_key = f"{e},{n}"
                    conn.sendall(public_key.encode())
                    print("Receiver: Public Key is sent to Sender")

                    data = conn.recv(4096).decode()
                    if data:
                        # Split the received string into a list of encrypted characters
                        encrypted_chars = data.split(',')
                        print(f"Receiver: Encrypted message received")
                        
                        decrypted_text, decryption_time = receiver.decrypt_message(encrypted_chars)
                        print(f"Receiver: Decrypted Text is: {decrypted_text}")
                        print(f"Decryption Time is: {decryption_time:.6f} seconds")
            
            break  # Exit the loop if successful
        
        except ValueError as ve:
            print(f"Error: {ve}")
            print("Please try again with valid prime numbers.")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    main()


