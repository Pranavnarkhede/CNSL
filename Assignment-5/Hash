def left_rotate(value, shift):
    """
    Perform left-rotate operation (cyclic left shift).
    :param value: Integer to rotate
    :param shift: Number of bits to rotate
    :return: Rotated integer
    """
    return ((value << shift) & 0xFFFFFFFF) | (value >> (32 - shift))


def sha1(message):
    """
    Calculate the SHA-1 hash of a message.
    :param message: Input string
    :return: SHA-1 hash as a hexadecimal string
    """
    # Initialize variables
    h0 = 0x67452301
    h1 = 0xEFCDAB89
    h2 = 0x98BADCFE
    h3 = 0x10325476
    h4 = 0xC3D2E1F0

    # Pre-processing (Padding the message)
    original_byte_len = len(message)
    original_bit_len = original_byte_len * 8

    # Add a single '1' bit to the message
    message += '\x80'

    # Pad with '0' bits until the message length is 64 bytes shy of a multiple of 512 bits
    while (len(message) * 8) % 512 != 448:
        message += '\x00'

    # Append the original length as a 64-bit big-endian integer
    message += ''.join(chr((original_bit_len >> (8 * i)) & 0xFF) for i in range(7, -1, -1))

    # Process the message in 512-bit (64-byte) chunks
    for i in range(0, len(message), 64):
        chunk = message[i:i + 64]

        # Break chunk into sixteen 32-bit big-endian words
        w = [0] * 80
        for j in range(16):
            w[j] = (ord(chunk[j * 4]) << 24) | (ord(chunk[j * 4 + 1]) << 16) | \
                   (ord(chunk[j * 4 + 2]) << 8) | (ord(chunk[j * 4 + 3]))

        # Extend the sixteen 32-bit words into eighty 32-bit words
        for j in range(16, 80):
            w[j] = left_rotate(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1)

        # Initialize hash value for this chunk
        a, b, c, d, e = h0, h1, h2, h3, h4

        # Main loop
        for j in range(80):
            if j < 20:
                f = (b & c) | ((~b) & d)
                k = 0x5A827999
            elif j < 40:
                f = b ^ c ^ d
                k = 0x6ED9EBA1
            elif j < 60:
                f = (b & c) | (b & d) | (c & d)
                k = 0x8F1BBCDC
            else:
                f = b ^ c ^ d
                k = 0xCA62C1D6

            temp = (left_rotate(a, 5) + f + e + k + w[j]) & 0xFFFFFFFF
            e = d
            d = c
            c = left_rotate(b, 30)
            b = a
            a = temp

        # Add this chunk's hash to result so far
        h0 = (h0 + a) & 0xFFFFFFFF
        h1 = (h1 + b) & 0xFFFFFFFF
        h2 = (h2 + c) & 0xFFFFFFFF
        h3 = (h3 + d) & 0xFFFFFFFF
        h4 = (h4 + e) & 0xFFFFFFFF

    # Produce the final hash value (big-endian)
    return '{:08x}{:08x}{:08x}{:08x}{:08x}'.format(h0, h1, h2, h3, h4)


# Main demonstration
if __name__ == "__main__":
    # Input message
    message = input("Enter the message to hash: ")
    # Calculate and display SHA-1 hash
    hash_value = sha1(message)
    print(f"SHA-1 Hash: {hash_value}")
